import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useParams, useNavigate } from "react-router-dom";
import {
  fetchorderdetails,
  updateOrderStatus,
  cancelOrder,
} from "../../slices/adminOrderSlice";
import "../../assets/admin/OrderDetail.css";
import Swal from "sweetalert2";

const ORDER_STATUS_OPTIONS = [
  "Ch·ªù x√°c nh·∫≠n",
  "ƒê√£ x√°c nh·∫≠n", 
  "ƒêang v·∫≠n chuy·ªÉn",
  "ƒê√£ giao h√†ng",
  "Ho√†n th√†nh",
  "ƒê√£ h·ªßy"
];

const getNextStatus = (current) => {
  const idx = ORDER_STATUS_OPTIONS.indexOf(current);
  if (idx === -1 || idx === ORDER_STATUS_OPTIONS.length - 1) return null;
  if (current === "ƒê√£ h·ªßy") return null;
  if (current === "Ho√†n th√†nh") return null;
  const next = ORDER_STATUS_OPTIONS[idx + 1];
  if (next === "ƒê√£ h·ªßy") return null;
  return next;
};

const OrderDetails = () => {
  const { orderId } = useParams();
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { order, loading, error } = useSelector((state) => state.adminOrder);
  const [newStatus, setNewStatus] = useState("");
  const [updating, setUpdating] = useState(false);

  useEffect(() => {
    if (orderId) {
      dispatch(fetchorderdetails(orderId));
    }
  }, [dispatch, orderId]);

  useEffect(() => {
    if (order && order.status) {
      setNewStatus(order.status);
    }
  }, [order]);

  if (loading) {
    return (
      <div className="order-detail-loading">
        <div className="spinner-border text-primary" role="status">
          <span className="visually-hidden">ƒêang t·∫£i...</span>
        </div>
        <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
      </div>
    );
  }

  if (error) return <p className="order-detail-error">{error}</p>;
  if (!order) return null;

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat("vi-VN").format(amount) + "ƒë";
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString('vi-VN', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  };

  const nextStatus = getNextStatus(order?.status);

  const handleUpdateStatus = async () => {
    if (!order || !order.order_id || !nextStatus || nextStatus === order.status) return;
    setUpdating(true);
    try {
      await dispatch(updateOrderStatus({ orderId: order.order_id, status: nextStatus })).unwrap();
      Swal.fire("Th√†nh c√¥ng", `ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i sang "${nextStatus}"`, "success");
    } catch (e) {
      Swal.fire("L·ªói", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i", "error");
    }
    setUpdating(false);
  };

  const handleCancelOrder = async () => {
    if (!order || !order.order_id) return;

    const { value: reason } = await Swal.fire({
      title: "Nh·∫≠p l√Ω do hu·ª∑ ƒë∆°n h√†ng:",
      input: "text",
      inputPlaceholder: "Nh·∫≠p l√Ω do...",
      showCancelButton: true,
      confirmButtonText: "X√°c nh·∫≠n",
      cancelButtonText: "H·ªßy",
    });

    if (!reason) return;

    setUpdating(true);
    try {
      await dispatch(cancelOrder({ orderId: order.order_id, cancel_reason: reason })).unwrap();
      Swal.fire("Th√†nh c√¥ng", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c hu·ª∑.", "success");
    } catch (e) {
      Swal.fire("L·ªói", "Kh√¥ng th·ªÉ hu·ª∑ ƒë∆°n h√†ng.", "error");
    }
    setUpdating(false);
  };

  // Timeline status steps - ƒê√É C·∫¨P NH·∫¨T ƒë·ªÉ x·ª≠ l√Ω tr·∫°ng th√°i h·ªßy
  const getStatusMilestones = (currentStatus, cancelReason = null) => {
    // Ki·ªÉm tra n·∫øu ƒë∆°n h√†ng ƒë√£ b·ªã h·ªßy
    if (currentStatus === "ƒê√£ h·ªßy") {
      return [
        {
          key: 'cancelled',
          title: 'ƒê√£ h·ªßy',
          icon: '‚ùå',
          description: cancelReason ? `ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy. L√Ω do: ${cancelReason}` : 'ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy',
          priority: 1,
          isCompleted: true,
          isActive: false,
          isPending: false,
          isCancelled: true // Flag ƒë·ªÉ nh·∫≠n di·ªán tr·∫°ng th√°i h·ªßy
        }
      ];
    }

    const normalMilestones = [
      {
        key: 'pending',
        title: 'Ch·ªù x√°c nh·∫≠n',
        icon: 'üìã',
        description: 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t',
        priority: 1
      },
      {
        key: 'confirmed',
        title: 'ƒê√£ x√°c nh·∫≠n',
        icon: '‚úÖ',
        description: 'X√°c nh·∫≠n v√† chu·∫©n b·ªã',
        priority: 2
      },
      {
        key: 'shipping',
        title: 'ƒêang v·∫≠n chuy·ªÉn',
        icon: 'üöö',
        description: 'ƒêang giao h√†ng',
        priority: 3
      },
      {
        key: 'delivered',
        title: 'ƒê√£ giao h√†ng',
        icon: 'üì¶',
        description: 'Giao th√†nh c√¥ng',
        priority: 4
      },
      {
        key: 'completed',
        title: 'Ho√†n th√†nh',
        icon: 'üéâ',
        description: 'ƒê∆°n h√†ng ho√†n t·∫•t',
        priority: 5
      }
    ];

    let currentPriority = 1;
    switch (currentStatus?.toLowerCase()) {
      case 'ch·ªù x√°c nh·∫≠n':
        currentPriority = 1;
        break;
      case 'ƒë√£ x√°c nh·∫≠n':
        currentPriority = 2;
        break;
      case 'ƒëang v·∫≠n chuy·ªÉn':
        currentPriority = 3;
        break;
      case 'ƒë√£ giao h√†ng':
        currentPriority = 4;
        break;
      case 'ho√†n th√†nh':
        currentPriority = 6; // ƒê·∫∑t > 5 ƒë·ªÉ t·∫•t c·∫£ milestone ƒë·ªÅu completed
        break;
      default:
        currentPriority = 1;
    }

    return normalMilestones.map(milestone => ({
      ...milestone,
      isCompleted: milestone.priority < currentPriority,
      isActive: milestone.priority === currentPriority && currentPriority <= 5,
      isPending: milestone.priority > currentPriority,
      isCancelled: false
    }));
  };

  // G·ªçi h√†m v·ªõi cancel_reason
  const statusMilestones = getStatusMilestones(order.status, order.cancel_reason);

  return (
    <div className="detail-order-return-container">
       <button className="back-button" onClick={() => navigate("/admin/orders")}>
          <svg width="24" height="16" viewBox="0 0 24 24" fill="currentColor">
            <path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"/>
          </svg>
          Quay l·∫°i danh s√°ch ƒë∆°n h√†ng
        </button>

      <div className="main-content">
        {/* Left Column */}
        <div className="left-column">
          {/* Order Information */}
          <div className="info-card">
            <div className="card-header">
              <div className="header-left">
                <span className="card-icon">üìã</span>
                <h2 className="card-title">Th√¥ng tin ƒë∆°n h√†ng</h2>
              </div>
              <div className="order-code">M√£ ƒë∆°n: <span className="fw-bold">{order.order_code}</span></div>
            </div>
            
            <div className="order-info-grid">
              <div className="info-item">
                <span className="info-label">Kh√°ch h√†ng</span>
                <span className="info-value">{order.customer}</span>
              </div>
              
              <div className="info-item">
                <span className="info-label">Ng√†y ƒë·∫∑t h√†ng</span>
                <span className="info-value">{formatDate(order.order_date)}</span>
              </div>
              
              <div className="info-item">
                <span className="info-label">Email</span>
                <span className="info-value">{order.email || "Ch∆∞a c·∫≠p nh·∫≠t"}</span>
              </div>
              
              <div className="info-item">
                <span className="info-label">S·ªë ƒëi·ªán tho·∫°i</span>
                <span className="info-value">{order.phone || "Ch∆∞a c·∫≠p nh·∫≠t"}</span>
              </div>
              
              <div className="info-item">
                <span className="info-label">T·ªïng ti·ªÅn</span>
                <span className="info-value highlight">{formatCurrency(order.total_amount)}</span>
              </div>
              
              <div className="info-item">
                <span className="info-label mb-2">Ph∆∞∆°ng th·ª©c thanh to√°n</span>
                <div className="payment-method">
                  <span className="payment-icon"></span>
                  {order.payment_method?.join(" - ") || "COD"}
                </div>
              </div>
              
              <div className="info-item">
                <span className="info-label">Tr·∫°ng th√°i ƒë∆°n h√†ng</span>
                <span className="status-returned-text">{order.status}</span>
              </div>

              <div className="info-item">
                <span className="info-label">Tr·∫°ng th√°i thanh to√°n</span>
                <span className="status-returned-text">{order.payment_status}</span>
              </div>
            </div>
          </div>

          {/* Delivery Address */}
          <div className="info-card">
            <div className="card-header">
              <div className="header-left">
                <span className="card-icon">üìç</span>
                <h2 className="card-title">ƒê·ªãa ch·ªâ giao h√†ng</h2>
              </div>
            </div>
            <div className="address-content">
              <p>{order.address || "Ch∆∞a c·∫≠p nh·∫≠t"}</p>
            </div>
          </div>

          {/* Products */}
          <div className="info-card">
            <div className="card-header">
              <div className="header-left">
                <span className="card-icon">üì¶</span>
                <h2 className="card-title">S·∫£n ph·∫©m ƒë√£ ƒë·∫∑t</h2>
              </div>
            </div>
            
            {order.products?.map((product, index) => {
              const storage = product.variant_attributes?.find((attr) => attr.attribute_name === "B·ªô nh·ªõ");
              const color = product.variant_attributes?.find((attr) => attr.attribute_name === "M√†u s·∫Øc");
              
              return (
                <div key={index} className="product-card">
                  <img 
                    src={product.product_image} 
                    alt={product.product_name}
                    className="product-image"
                  />
                  <div className="product-details">
                    <div className="product-name">{product.product_name}</div>
                    <div className="productdetails1">
                    <div className="product-specs">
                      <span>üì± B·ªô nh·ªõ: {storage?.attribute_value || "128GB"}</span>
                      <span>üé® M√†u s·∫Øc: {color?.attribute_value || "White Titanium"}</span>
                    </div>
                    <div className="product-price-info">
                      <span className="product-quantity">S·ªë l∆∞·ª£ng: {product.quantity}</span>
                      <span className="product-unit-price">ƒê∆°n gi√°: {formatCurrency(product.price)}</span>
                    </div>
                    </div>
                  </div>
                  <div className="product-total">
                    {formatCurrency(product.subtotal)}
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        {/* Right Column */}
        <div className="right-column">
          {/* Processing History - ƒê√É C·∫¨P NH·∫¨T */}
          <div className="info-card">
            <div className="card-header">
              <div className="header-left">
                <span className="card-icon">üìù</span>
                <h2 className="card-title">L·ªãch s·ª≠ c·∫≠p nh·∫≠t ƒë∆°n h√†ng</h2>
              </div>
            </div>
            
            <div className="history-section">
              {statusMilestones.map((milestone, index) => (
                <div key={milestone.key} className={`history-item ${
                  milestone.isCancelled ? 'cancelled' :
                  milestone.isCompleted ? 'completed' : 
                  milestone.isActive ? 'active' : 'pending'
                }`}>
                  <div className="history-icon">
                    <span>
                      {milestone.isCompleted && !milestone.isCancelled ? '‚úì' : milestone.icon}
                    </span>
                  </div>
                  <div className="history-content">
                    <div className="history-title">{milestone.title}</div>
                    <div className="history-description">
                      {milestone.description}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

        {/* Action Buttons */}
        <div className="info-card">
          <div className="card-header">
            <div className="header-left">
              <span className="card-icon">‚ö°</span>
              <h2 className="card-title">Thao t√°c nhanh</h2>
            </div>
          </div>
          
          <div className="action-buttons">
            {order.status === "Ch·ªù x√°c nh·∫≠n" && (
              <>
                <button 
                  className="action-button button-primary" 
                  onClick={handleUpdateStatus}
                  disabled={updating}
                >
                  {updating ? 'ƒêang c·∫≠p nh·∫≠t...' : 'C·∫≠p nh·∫≠t sang "ƒê√£ x√°c nh·∫≠n"'}
                </button>
                
                <button 
                  className="action-button button-danger" 
                  onClick={handleCancelOrder}
                  disabled={updating}
                >
                  {updating ? 'ƒêang x·ª≠ l√Ω...' : 'Hu·ª∑ ƒë∆°n h√†ng'}
                </button>
              </>
            )}

            {/* Tr·∫°ng th√°i "ƒê√£ x√°c nh·∫≠n" - CH·ªà hi·ªÉn th·ªã button C·∫≠p nh·∫≠t */}
            {order.status === "ƒê√£ x√°c nh·∫≠n" && (
              <button 
                className="action-button button-primary" 
                onClick={handleUpdateStatus}
                disabled={updating}
              >
                {updating ? 'ƒêang c·∫≠p nh·∫≠t...' : 'C·∫≠p nh·∫≠t sang "ƒêang v·∫≠n chuy·ªÉn"'}
              </button>
            )}

            {/* Tr·∫°ng th√°i "ƒêang v·∫≠n chuy·ªÉn" - CH·ªà hi·ªÉn th·ªã button C·∫≠p nh·∫≠t */}
            {order.status === "ƒêang v·∫≠n chuy·ªÉn" && (
              <button 
                className="action-button button-primary" 
                onClick={handleUpdateStatus}
                disabled={updating}
              >
                {updating ? 'ƒêang c·∫≠p nh·∫≠t...' : 'C·∫≠p nh·∫≠t sang "ƒê√£ giao h√†ng"'}
              </button>
            )}

            {/* Tr·∫°ng th√°i "ƒê√£ giao h√†ng" - Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng */}
            {order.status === "ƒê√£ giao h√†ng" && (
              <div className="success-message">
                <p>Giao h√†ng th√†nh c√¥ng</p>
              </div>
            )}

            {/* Tr·∫°ng th√°i "Ho√†n th√†nh" - Hi·ªÉn th·ªã th√¥ng b√°o ho√†n th√†nh */}
            {order.status === "Ho√†n th√†nh" && (
              <div className="success-message">
                <p>ƒê∆°n h√†ng ƒë√£ ho√†n th√†nh</p>
              </div>
            )}

            {order.status === "ƒê√£ h·ªßy" && (
              <div className="cancelled-message">
                <p>ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy</p>
              
              </div>
            )}

            {/* Fallback cho c√°c tr·∫°ng th√°i kh√°c */}
            {!["Ch·ªù x√°c nh·∫≠n", "ƒê√£ x√°c nh·∫≠n", "ƒêang v·∫≠n chuy·ªÉn", "ƒê√£ giao h√†ng", "Ho√†n th√†nh", "ƒê√£ h·ªßy"].includes(order.status) && (
              <div className="no-actions">
                <p>Kh√¥ng c√≥ thao t√°c kh·∫£ d·ª•ng cho tr·∫°ng th√°i: {order.status}</p>
              </div>
            )}
          </div>
        </div>

          {/* Summary */}
          <div className="info-card">
            <div className="card-header">
              <div className="header-left">
                <span className="card-icon">üìä</span>
                <h2 className="card-title">T·ªïng k·∫øt ƒë∆°n h√†ng</h2>
              </div>
            </div>
            
            <div className="summary-section">
              <div className="summary-row">
                <span className="summary-label">T·∫°m t√≠nh:</span>
                <span className="summary-value">{formatCurrency(order.total_amount)}</span>
              </div>
            
              <div className="summary-row final">
                <span className="summary-label">T·ªïng c·ªông:</span>
                <span className="summary-value highlight final-amount">{formatCurrency(order.total_amount)}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default OrderDetails;
